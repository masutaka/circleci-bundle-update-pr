require "circleci/rubocop/pr/version"
require "octokit"

module Circleci
  module Rubocop
    module Pr
      def self.create_if_needed(git_username: nil, git_email: nil, git_branches: ["master"])
        raise "$CIRCLE_PROJECT_USERNAME isn't set" unless ENV['CIRCLE_PROJECT_USERNAME']
        raise "$CIRCLE_PROJECT_REPONAME isn't set" unless ENV['CIRCLE_PROJECT_REPONAME']
        raise "$GITHUB_ACCESS_TOKEN isn't set" unless ENV['GITHUB_ACCESS_TOKEN']
        return unless need?(git_branches)
        repo_full_name = "#{ENV['CIRCLE_PROJECT_USERNAME']}/#{ENV['CIRCLE_PROJECT_REPONAME']}"
        now = Time.now
        branch = "rubocop-a-#{now.strftime('%Y%m%d%H%M%S')}"

        git_username ||= client.user.login
        git_email ||= "#{git_username}@users.noreply.github.com"

        create_branch(git_username, git_email, branch)
        create_pull_request(repo_full_name, branch, now)
      end

      def self.need?(git_branches)
        return false unless git_branches.include?(ENV['CIRCLE_BRANCH'])
        unless system("bundle exec rubocop -a")
          raise "Unable to execute `bundle exec rubocop -a`"
        end
        `git status -sb 2> /dev/null`.empty?.!
      end
      private_class_method :need?

      def self.create_branch(git_username, git_email, branch)
        system("git config user.name #{git_username}")
        system("git config user.email #{git_email}")
        system("git add -A")
        system("git commit -m '$ bundle exec rubocop -a'")
        system("git branch -M #{branch}")
        system("git push origin #{branch}")
      end
      private_class_method :create_branch

      def self.create_pull_request(repo_full_name, branch, now)
        title = "bundle exec rubocop -a at #{now.strftime('%Y-%m-%d %H:%M:%S %Z')}"
        body  = "auto generated by [CircleCI of #{ENV['CIRCLE_PROJECT_REPONAME']}](https://circleci.com/gh/#{repo_full_name})"
        client.create_pull_request(repo_full_name, ENV['CIRCLE_BRANCH'], branch, title, body)
      end
      private_class_method :create_pull_request

      def self.client
        Octokit::Client.new(access_token: ENV["GITHUB_ACCESS_TOKEN"])
      end
      private_class_method :client
    end
  end
end
